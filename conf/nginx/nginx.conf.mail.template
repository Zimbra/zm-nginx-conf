mail
{
    # mail proxy connection timeout
    proxy_ctimeout              ${mail.ctimeout};

    # pass error messages from the backend server to the client
    # if true, the error messages are passed to the client verbatim, else
    # nginx logs the original error message in its log file and sends back
    # a generic error message to the client
    #
    proxy_pass_error_message    ${mail.passerrors};

    # HTTP lookup handlers that will return the route information for a
    # pop3/imap login
    #
    zm_auth_http;

    # Wether to use ssl to connect the upstream mail servers
    #
    proxy_ssl ${mail.proxy.ssl};

    # IMAP/POP3 greeting messages
    #
    imap_greeting            "${mail.imap.greeting}";
    pop3_greeting            "${mail.pop3.greeting}";

    pop3_capabilities        ${mail.pop3capa};
    imap_capabilities        ${mail.imapcapa};

    # IMAP4 ID Extension support (RFC 2971)
    # Use the imap_id directive to specify the string that should be sent
    # back by the proxy server back to the client upon receipt of an
    # IMAP ID command as described by RFC 2971
    # There MUST be an even number of strings specified against
    # this directive, because RFC 2971 defines the server response to be
    # a list of field-value pairs (refer Formal Syntax, RFC 2971 Section 4)
    # Each string in this list should be enclosed within double quotes
    # If not quoted, they will be automatically quoted by nginx, but the
    # use of quotes allows the space character to be included within an
    # ID field or a value
    # The odd numbered strings are treated as ID fields, with the following
    # even-numbered string considered to be the ID value corresponding to
    # the field name
    # If omitted, the response to the ID command will be nil, which
    # according to RFC 2971, is permissible in lieu of the field-value list
    # The imap_id directive may be overridden in a server block
    #
    imap_id         ${mail.imapid};

    # Default realm (kerberos)
    # For GSSAPI authentication, when the server's realm is the same as
    # the default realm as defined in the default_realm variable in the
    # [libdefaults] section of krb5.conf, then in this case, the SASL
    # GSSAPI library strips off the realm portion from the authenticating
    # principal. Therefore, the default realm name must be specified here
    # so that NGINX can append it to the authenticating principal for GSSAPI
    #
    default_realm           "${mail.defaultrealm}";

    # Resolve IP address to SASL server name (kerberos)
    # For GSSAPI, in cases of multi-homed hosts, it may be that the proxy
    # server has multiple network interfaces, and we wish to reverse map
    # the incoming interface IP address (via DNS) to a host name, which will
    # be used as the service principal
    # Set this to on if gssapi clients will connect to a proxy server using
    # different FQDNs. Otherwise, set it to off, and the fully qualified
    # host name of the proxy (as returned by hostname), will be used as the
    # service principal
    # If not specified, this configuration defaults to off
    #
    sasl_host_from_ip       ${mail.sasl_host_from_ip};

    # sasl_app_name
    # This is the application name which nginx will use when initializing
    # the SASL library using the call to sasl_server_init()
    # The SASL library is initialized once per process, the application name
    # provided here is used for where to find the default configuration file
    # If not specified, sasl_app_name defaults to "nginx"
    #
    sasl_app_name           "${mail.saslapp}";

    # Login rate limiting directives
    #

    # mail_login_ip_max
    #
    # Sets the maximum number of times that any user is allowed to log in from
    # a particular IP over POP or IMAP to this proxy server before the login is
    # rejected with an appropriate protocol specific bye response
    # This counter is cumulative for all users that appear to the proxy to be
    # logging in from the same IP address
    # If multiple users appear to the proxy to be logging in from the same IP
    # address (usual with NATing), then each of the different users' login will
    # contribute to increasing the hit counter for that IP address, and when the
    # counter eventually exceeds mail_login_ip_max, then the connections from
    # that IP address will be throttled
    # Therefore, all users from the same IP will contribute to
    # (and be affected by) this counter
    # Logins using all protocols (POP3/POP3S/IMAP/IMAPS) will affect this
    # counter, (the counter is aggregate for all protocols, *not* separate)
    # See notes accompanying the mail_login_ip_ttl for reasonable values for
    # this directive
    # If this value is set to 0, then no throttling will take place for any IP
    #
    mail_login_ip_max               ${mail.ipmax};

    # mail_login_ip_ttl
    #
    # Sets the time-to-live for the hit counter for IP login throttling
    # Used in conjunction with mail_login_ip_max, this defines the semantics
    # of the throttling for IP logins. Therfore, if this is set to 3600s, and
    # if mail_login_ip_max is set to 1000, then it means that NGINX should not
    # allow more than 1000 users to log in to the proxy from the same IP,
    # within the time interval of an hour (=3600s)
    # The semantics for such a configuration would then be -
    # "allow maximum 1000 users per hour from any given IP address"
    #
    mail_login_ip_ttl               ${mail.ipttl};

    # mail_login_ip_imap_max
    #
    # Sets the maximum number of times that any user is allowed to log in from
    # a particular IP over IMAP to this proxy server before the login is rejected
    # with an appropriate protocol specific bye response.
    #
    # This counter is cumulative for all users that appear to the proxy to be
    # logging in from the same IP address.
    # If multiple users appear to the proxy to be logging in from the same IP
    # address (usual with NATing), then each of the different users' login will
    # contribute to increasing the hit counter for that IP address, and when the
    # counter eventually exceeds mail_login_ip_imap_max, then the connections from
    # that IP address will be throttled
    # Therefore, all users from the same IP will contribute to
    # (and be affected by) this counter
    # Logins using the IMAP protocol (IMAP/IMAPS) will affect this
    # counter, (the counter is aggregate for IMAP)
    # See notes accompanying the mail_login_ip_imap_ttl for reasonable values for
    # this directive
    # If this value is set to 0, the handling of imap connections will fall back to
    # using the mail_login_ip_max setting
    #
    mail_login_ip_imap_max          ${mail.imapmax};

    # mail_login_ip_imap_ttl
    #
    # Sets the time-to-live for the hit counter for IMAP login throttling
    # Used in conjunction with mail_login_ip_imap_max, this defines the semantics
    # of the throttling for IMAP logins. Therefore, if this is set to 3600s, and
    # if mail_login_ip_imap_max is set to 1000, then it means that NGINX should not
    # allow more than 1000 IMAP users to log in to the proxy from the same IP,
    # within the time interval of an hour (=3600s)
    # The semantics for such a configuration would then be -
    # "allow maximum 1000 IMAP users per hour from any given IP address"
    #
    mail_login_ip_imap_ttl          ${mail.imapttl};

    # mail_login_ip_pop3_max
    #
    # Sets the maximum number of times that any user is allowed to log in from
    # a particular IP over POP3 to this proxy server before the login is rejected
    # with an appropriate protocol specific bye response.
    #
    # This counter is cumulative for all users that appear to the proxy to be
    # logging in from the same IP address.
    # If multiple users appear to the proxy to be logging in from the same IP
    # address (usual with NATing), then each of the different users' login will
    # contribute to increasing the hit counter for that IP address, and when the
    # counter eventually exceeds mail_login_ip_pop3_max, then the connections from
    # that IP address will be throttled
    # Therefore, all users from the same IP will contribute to
    # (and be affected by) this counter
    # Logins using the POP3 protocol (POP3/POP3S) will affect this
    # counter, (the counter is aggregate for POP3)
    # See notes accompanying the mail_login_ip_pop3_ttl for reasonable values for
    # this directive
    # If this value is set to 0, the handling of pop3 connections will fall back to
    # using the mail_login_ip_max setting
    #
    mail_login_ip_pop3_max          ${mail.pop3max};

    # mail_login_ip_pop3_ttl
    #
    # Sets the time-to-live for the hit counter for POP3 login throttling
    # Used in conjunction with mail_login_ip_pop3_max, this defines the semantics
    # of the throttling for POP3 logins. Therefore, if this is set to 3600s, and
    # if mail_login_ip_pop3_max is set to 1000, then it means that NGINX should not
    # allow more than 1000 POP3 users to log in to the proxy from the same IP,
    # within the time interval of an hour (=3600s)
    # The semantics for such a configuration would then be -
    # "allow maximum 1000 IMAP users per hour from any given IP address"
    #
    mail_login_ip_pop3_ttl          ${mail.pop3ttl};

    # Define a textual message that should be displayed to the user when
    # his/her connection is rejected based on IP overusage
    # This message will be encapsulated in the proper protocol specific
    # response to the client ("* BYE" for IMAP, and "-ERR" for POP3)
    #
    mail_login_ip_rejectmsg         "${mail.iprej}";

    # Similar semantics for Rate Limiting User Logins
    # Setting mail_login_user_max to 100 and mail_login_user_ttl to 3600s
    # implies "allow maximum 100 logins per hour for any user"
    # As with the ip counterparts, the user hit counter and timeout are
    # cumulative for all protocols
    # Also, for a given user's login, both counters are checked in succession,
    # with the IP counter being checked first
    # A login may be rejected (throttled) because the IP is over-usage, or
    # because the login name itself is over-usage
    # A value of 0 indicates that no throttling will take place for any user
    #
    mail_login_user_max             ${mail.usermax};
    mail_login_user_ttl             ${mail.userttl};
    mail_login_user_rejectmsg       "${mail.userrej}";

    # List of servers to which no ip throttling will be done
    ${mail.whitelistip.:servers}

    # Sets the time-to-live of the list of servers for which no ip throttling
    # will be done
    mail_whitelist_ip_ttl   ${mail.whitelist.ttl};

    # Issue POP3 XOIP before logging in to upstream (Audit purposes)
    #
    proxy_issue_pop3_xoip   ${mail.upstream.pop3xoip};

    # Issue IMAP ID before logging in to upstream (Audit purposes)
    #
    proxy_issue_imap_id     ${mail.upstream.imapid};

    # Supported SASL Authentication mechanisms
    #
    # Use the pop3_auth and imap_auth to specify which SASL mechanisms are
    # enabled for POP and IMAP respectively
    # These directives may be specified at mail{} level, or overridden at
    # server{} level
    # Even though an authentication mechanism may be listed against
    # pop3_auth and/or imap_auth, it may or may not be available depending
    # on whether cleartext login is available (see description for starttls)
    # For example, if starttls is set to only, then SASL PLAIN is not
    # available outside of TLS/SSL
    # SASL mechanisms may be specified all on one line (space separated)
    # against pop3_auth, or they may be specified on a separate line
    # Specifying the SASL mechanisms on a separate line has the advantage
    # that they can be enabled/disabled separately by zmmtaconfig using
    # different LDAP attributes
    # Currently, only PLAIN and GSSAPI mechanisms are supported
    #
    ${mail.imap.authplain.enabled}imap_auth          plain;
    ${mail.imap.authgssapi.enabled}imap_auth         gssapi;

    ${mail.pop3.authplain.enabled}pop3_auth          plain;
    ${mail.pop3.authgssapi.enabled}pop3_auth         gssapi;

    # Specify whether to use literal strings while issuing the LOGIN command
    # to the upstream server. If set to on, then it means that NGINX will use
    # literal strings to log in to the upstream server, and so the upstream
    # MUST support literal strings
    # If set to off, then NGINX uses quoted strings to log in to the upstream
    # server when using the LOGIN command
    # If not specified, imap_literalauth defaults to on
    #
    imap_literalauth        ${mail.imap.literalauth};

    # Auth Wait Interval
    # Specifies the time interval that NGINX will wait before rejecting an
    # authentication attempt to the upstream mail server with invalid credentials.
    # This value is not related to the wait time when Zimbra lookup handler replies
    # some login error, which is controled by the "Auth-Wait" header returned by the
    # lookup handler.
    # If not specified, this value defaults to 10 seconds.
    #
    zm_auth_wait               ${mail.authwait};

    # TLS configuration
    #
    ssl_prefer_server_ciphers   ${mail.ssl.preferserverciphers};
    ssl_certificate     ${ssl.crt.default};
    ssl_certificate_key ${ssl.key.default};

    # SSL Protocols & Ciphers configuration
    # Enabled protocols & Permitted ciphers. Ciphers are assigned in the formats supported by OpenSSL
    #
    ssl_protocols           ${mail.ssl.protocols};
    ssl_ciphers             ${mail.ssl.ciphers};

    # SSL ECDH cipher curve configuration
    ssl_ecdh_curve          ${mail.ssl.ecdh.curve};

    ${mail.imap.enabled} include ${core.includes}/${core.cprefix}.mail.imap;
    ${mail.imap.enabled} include ${core.includes}/${core.cprefix}.mail.imap.default;
    ${mail.imaps.enabled} include ${core.includes}/${core.cprefix}.mail.imaps;
    ${mail.imaps.enabled} include ${core.includes}/${core.cprefix}.mail.imaps.default;
    ${mail.pop3.enabled} include ${core.includes}/${core.cprefix}.mail.pop3;
    ${mail.pop3.enabled} include ${core.includes}/${core.cprefix}.mail.pop3.default;
    ${mail.pop3s.enabled} include ${core.includes}/${core.cprefix}.mail.pop3s;
    ${mail.pop3s.enabled} include ${core.includes}/${core.cprefix}.mail.pop3s.default;
}
