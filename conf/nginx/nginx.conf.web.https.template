!{explode domain(vhn)}
# HTTPS Proxy Configuration
#
server
{
    server_name             ${vhn};
    ${core.ipboth.enabled}listen                  ${vip}${web.https.port} ipv6only=off;
    ${core.ipv4only.enabled}listen                  ${vip}${web.https.port};
    ${core.ipv6only.enabled}listen                  ${vip}${web.https.port};
    ${web.add.headers.vhost}
    client_max_body_size    0;
    ssl                     on;
    ssl_protocols           ${web.ssl.protocols};
    ssl_prefer_server_ciphers ${web.ssl.preferserverciphers};
    ssl_session_cache       ${ssl.session.cachesize};
    ssl_session_timeout     ${ssl.session.timeout};
    ssl_ciphers             ${web.ssl.ciphers};
    ssl_ecdh_curve          ${web.ssl.ecdh.curve};
    ssl_certificate         ${ssl.crt};
    ssl_certificate_key     ${ssl.key};
    ssl_verify_client       ${ssl.clientcertmode};
    proxy_ssl_protocols           ${web.ssl.protocols};
    proxy_ssl_ciphers             ${web.ssl.ciphers};
    ${web.ssl.dhparam.enabled}ssl_dhparam             ${web.ssl.dhparam.file};
    include                 ${core.includes}/${core.cprefix}.web.https.mode-${web.mailmode};

    set $login_upstream     ${web.upstream.login.target};
    if ($http_cookie ~ "ZM_AUTH_TOKEN=") {
        set $login_upstream    ${web.upstream.webclient.target};
    }

    ${web.login.upstream.disable} location = ${web.login.upstream.url}/
    ${web.login.upstream.disable} {
    ${web.login.upstream.disable}     set $mailhostport ${web.http.uport};   # replace this with *the* mailhost port
    ${web.login.upstream.disable}     set $relhost $host;
    ${web.login.upstream.disable}
    ${web.login.upstream.disable}     if ($mailhostport != 80) {   # standard HTTP port, do not replace
    ${web.login.upstream.disable}         set $relhost $host:$mailhostport;
    ${web.login.upstream.disable}     }
    ${web.login.upstream.disable}
    ${web.login.upstream.disable}     # Proxy to Zimbra Login Upstream
    ${web.login.upstream.disable}     proxy_pass          $login_upstream;
    ${web.login.upstream.disable}
    ${web.login.upstream.disable}     # For audit
    ${web.login.upstream.disable}     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    ${web.login.upstream.disable}
    ${web.login.upstream.disable}     # For Virtual Hosting
    ${web.login.upstream.disable}     set $virtual_host $http_host;
    ${web.login.upstream.disable}     if ($virtual_host = '') {
    ${web.login.upstream.disable}        set $virtual_host $server_name:$server_port;
    ${web.login.upstream.disable}     }
    ${web.login.upstream.disable}     proxy_set_header Host            $virtual_host;
    ${web.login.upstream.disable}
    ${web.login.upstream.disable}     # Location header fudging
    ${web.login.upstream.disable}     # Because NGINX SSL speaks plain HTTP to upstream, therefore any
    ${web.login.upstream.disable}     # redirects to http:// coming from the upstream need to be fudged
    ${web.login.upstream.disable}     # to https://
    ${web.login.upstream.disable}     #
    ${web.login.upstream.disable}     proxy_redirect http://$http_host/ https://$http_host/;
    ${web.login.upstream.disable}
    ${web.login.upstream.disable}     # Fudge inter-mailbox redirects (kludge)
    ${web.login.upstream.disable}     proxy_redirect http://$relhost/ https://$http_host/;
    ${web.login.upstream.disable} }

    ${web.login.upstream.disable} location = /
    ${web.login.upstream.disable} {
    ${web.login.upstream.disable}     set $mailhostport ${web.http.uport};   # replace this with *the* mailhost port
    ${web.login.upstream.disable}     set $relhost $host;
    ${web.login.upstream.disable}
    ${web.login.upstream.disable}     if ($mailhostport != 80) {   # standard HTTP port, do not replace
    ${web.login.upstream.disable}         set $relhost $host:$mailhostport;
    ${web.login.upstream.disable}     }
    ${web.login.upstream.disable}
    ${web.login.upstream.disable}     # Proxy to Zimbra Login Upstream
    ${web.login.upstream.disable}     proxy_pass          $login_upstream;
    ${web.login.upstream.disable}
    ${web.login.upstream.disable}     # For audit
    ${web.login.upstream.disable}     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    ${web.login.upstream.disable}
    ${web.login.upstream.disable}     # For Virtual Hosting
    ${web.login.upstream.disable}     set $virtual_host $http_host;
    ${web.login.upstream.disable}     if ($virtual_host = '') {
    ${web.login.upstream.disable}        set $virtual_host $server_name:$server_port;
    ${web.login.upstream.disable}     }
    ${web.login.upstream.disable}     proxy_set_header Host            $virtual_host;
    ${web.login.upstream.disable}
    ${web.login.upstream.disable}     # Location header fudging
    ${web.login.upstream.disable}     # Because NGINX SSL speaks plain HTTP to upstream, therefore any
    ${web.login.upstream.disable}     # redirects to http:// coming from the upstream need to be fudged
    ${web.login.upstream.disable}     # to https://
    ${web.login.upstream.disable}     #
    ${web.login.upstream.disable}     proxy_redirect http://$http_host/ https://$http_host/;
    ${web.login.upstream.disable}
    ${web.login.upstream.disable}     # Fudge inter-mailbox redirects (kludge)
    ${web.login.upstream.disable}     proxy_redirect http://$relhost/ https://$http_host/;
    ${web.login.upstream.disable} }

    location /
    {
        # Begin stray redirect hack
        #
        # In some cases, we may get a stray redirect out of the mailhost,
        # which attempts to send us to $host:$mailhostport, where:
        #
        # $host is the host portion (excluding port) of the proxy URL
        # $mailhostport is the zimbraMailPort as applies to the mailhost
        #   server being redirected to
        #
        # This is the case when one mailhost in the upstream cluster is
        # trying to redirect to another mailhost in the same cluster
        # In this case, we need to trap and fudge this location header
        #
        # NOTE that this will only work in the cases where each mailhost
        # within the cluster has the same mailhostport (Limitation)
        #

        set $mailhostport ${web.http.uport};   # replace this with *the* mailhost port
        set $relhost $host;

        if ($mailhostport != 80) {   # standard HTTP port, do not replace
            set $relhost $host:$mailhostport;
        }

        # End stray redirect hack

        # Proxy to Zimbra Webclient Upstream
        proxy_pass       ${web.upstream.webclient.target};

        # For audit
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # For Virtual Hosting
        set $virtual_host $http_host;
        if ($virtual_host = '') {
            set $virtual_host $server_name:$server_port;
        }
        proxy_set_header Host            $virtual_host;

        # Location header fudging
        # Because NGINX SSL speaks plain HTTP to upstream, zimbraReverseProxyAvailableLookupTargetstherefore any
        # redirects to http:// coming from the upstream need to be fudged
        # to https://
        #
        proxy_redirect http://$http_host/ https://$http_host/;

        # Fudge inter-mailbox redirects (kludge)
        proxy_redirect http://$relhost/ https://$http_host/;
    }

    #For long polling of Microsoft ActiveSync
    location ^~ /Microsoft-Server-ActiveSync
    {
        # Begin stray redirect hack
        #
        # In some cases, we may get a stray redirect out of the mailhost,
        # which attempts to send us to $host:$mailhostport, where:
        #
        # $host is the host portion (excluding port) of the proxy URL
        # $mailhostport is the zimbraMailPort as applies to the mailhost
        #   server being redirected to
        #
        # This is the case when one mailhost in the upstream cluster is
        # trying to redirect to another mailhost in the same cluster
        # In this case, we need to trap and fudge this location header
        #
        # NOTE that this will only work in the cases where each mailhost
        # within the cluster has the same mailhostport (Limitation)
        #

        set $mailhostport ${web.http.uport};   # replace this with *the* mailhost port
        set $relhost $host;

        if ($mailhostport != 80) {   # standard HTTP port, do not replace
            set $relhost $host:$mailhostport;
        }

        # End stray redirect hack

        # Proxy to Zimbra Upstream
        proxy_pass          ${web.upstream.target};
        proxy_read_timeout  ${web.upstream.polling.timeout};
        proxy_buffering     off;

        # For audit
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # For Virtual Hosting
        set $virtual_host $http_host;
        if ($virtual_host = '') {
            set $virtual_host $server_name:$server_port;
        }
        proxy_set_header Host            $virtual_host;

        # Location header fudging
        # Because NGINX SSL speaks plain HTTP to upstream, therefore any
        # redirects to http:// coming from the upstream need to be fudged
        # to https://
        #
        proxy_redirect http://$http_host/ https://$http_host/;

        # Fudge inter-mailbox redirects (kludge)
        proxy_redirect http://$relhost/ https://$http_host/;
    }

    # For NoOpRequest
    location ^~ /service/soap/NoOpRequest {

        # Begin stray redirect hack
        #
        # In some cases, we may get a stray redirect out of the mailhost,
        # which attempts to send us to $host:$mailhostport, where:
        #
        # $host is the host portion (excluding port) of the proxy URL
        # $mailhostport is the zimbraMailPort as applies to the mailhost
        #   server being redirected to
        #
        # This is the case when one mailhost in the upstream cluster is
        # trying to redirect to another mailhost in the same cluster
        # In this case, we need to trap and fudge this location header
        #
        # NOTE that this will only work in the cases where each mailhost
        # within the cluster has the same mailhostport (Limitation)
        #

        set $mailhostport ${web.http.uport};   # replace this with *the* mailhost port
        set $relhost $host;

        if ($mailhostport != 80) {   # standard HTTP port, do not replace
            set $relhost $host:$mailhostport;
        }

        # End stray redirect hack

        # Proxy to Zimbra Upstream
        proxy_pass          ${web.upstream.target};
        proxy_read_timeout  ${web.upstream.noop.timeout};
        proxy_buffering     off;

        # For audit
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # For Virtual Hosting
        set $virtual_host $http_host;
        if ($virtual_host = '') {
            set $virtual_host $server_name:$server_port;
        }
        proxy_set_header Host            $virtual_host;

        # Location header fudging
        # Because NGINX SSL speaks plain HTTP to upstream, therefore any
        # redirects to http:// coming from the upstream need to be fudged
        # to https://
        #
        proxy_redirect http://$http_host/ https://$http_host/;

        # Fudge inter-mailbox redirects (kludge)
        proxy_redirect http://$relhost/ https://$http_host/;
    }

    # For WaitSetRequest
    location ^~ /service/soap/WaitSetRequest {

        # Begin stray redirect hack
        #
        # In some cases, we may get a stray redirect out of the mailhost,
        # which attempts to send us to $host:$mailhostport, where:
        #
        # $host is the host portion (excluding port) of the proxy URL
        # $mailhostport is the zimbraMailPort as applies to the mailhost
        #   server being redirected to
        #
        # This is the case when one mailhost in the upstream cluster is
        # trying to redirect to another mailhost in the same cluster
        # In this case, we need to trap and fudge this location header
        #
        # NOTE that this will only work in the cases where each mailhost
        # within the cluster has the same mailhostport (Limitation)
        #

        set $mailhostport ${web.http.uport};   # replace this with *the* mailhost port
        set $relhost $host;

        if ($mailhostport != 80) {   # standard HTTP port, do not replace
            set $relhost $host:$mailhostport;
        }

        # End stray redirect hack

        # Proxy to Zimbra Upstream
        proxy_pass          ${web.upstream.target};
        proxy_read_timeout  ${web.upstream.waitset.timeout};
        proxy_buffering     off;

        # For audit
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # For Virtual Hosting
        set $virtual_host $http_host;
        if ($virtual_host = '') {
            set $virtual_host $server_name:$server_port;
        }
        proxy_set_header Host            $virtual_host;

        # Location header fudging
        # Because NGINX SSL speaks plain HTTP to upstream, therefore any
        # redirects to http:// coming from the upstream need to be fudged
        # to https://
        #
        proxy_redirect http://$http_host/ https://$http_host/;

        # Fudge inter-mailbox redirects (kludge)
        proxy_redirect http://$relhost/ https://$http_host/;
    }

    location ^~ /autodiscover
    {
        # Begin stray redirect hack
        #
        # In some cases, we may get a stray redirect out of the mailhost,
        # which attempts to send us to $host:$mailhostport, where:
        #
        # $host is the host portion (excluding port) of the proxy URL
        # $mailhostport is the zimbraMailPort as applies to the mailhost
        #   server being redirected to
        #
        # This is the case when one mailhost in the upstream cluster is
        # trying to redirect to another mailhost in the same cluster
        # In this case, we need to trap and fudge this location header
        #
        # NOTE that this will only work in the cases where each mailhost
        # within the cluster has the same mailhostport (Limitation)
        #

        set $mailhostport ${web.http.uport};   # replace this with *the* mailhost port
        set $relhost $host;

        if ($mailhostport != 80) {   # standard HTTP port, do not replace
            set $relhost $host:$mailhostport;
        }

        set $autodiscover_upstream     ${web.upstream.target};
        ${web.ews.upstream.disable}    if ($http_user_agent ~ "ExchangeWebServices") {
        ${web.ews.upstream.disable}       set $autodiscover_upstream    ${web.upstream.ews.target};
        ${web.ews.upstream.disable}    }

        # End stray redirect hack

        # Proxy to Zimbra Mailbox Upstream
        proxy_pass       $autodiscover_upstream;

        # For audit
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # For Virtual Hosting
        set $virtual_host $http_host;
        if ($virtual_host = '') {
            set $virtual_host $server_name:$server_port;
        }
        proxy_set_header Host            $virtual_host;

        # Location header fudging
        # Because NGINX SSL speaks plain HTTP to upstream, therefore any
        # redirects to http:// coming from the upstream need to be fudged
        # to https://
        #
        proxy_redirect http://$http_host/ https://$http_host/;

        # Fudge inter-mailbox redirects (kludge)
        proxy_redirect http://$relhost/ https://$http_host/;
    }

    location ^~ /nginx_status {
        # Location block to enable the stub status module

        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow ::1;
        deny all;
    }

    ${web.xmpp.bosh.upstream.disable} location ^~ ${web.xmpp.local.bind.url}
    ${web.xmpp.bosh.upstream.disable} {
    ${web.xmpp.bosh.upstream.disable}     # Proxy to external XMPP server
    ${web.xmpp.bosh.upstream.disable}     proxy_pass          http://${web.xmpp.bosh.hostname}:${web.xmpp.bosh.port}${web.xmpp.remote.bind.url};
    ${web.xmpp.bosh.upstream.disable}     proxy_read_timeout  ${web.xmpp.bosh.timeout};
    ${web.xmpp.bosh.upstream.disable}     proxy_buffering     off;
    ${web.xmpp.bosh.upstream.disable}
    ${web.xmpp.bosh.upstream.disable}     # For audit
    ${web.xmpp.bosh.upstream.disable}     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    ${web.xmpp.bosh.upstream.disable}
    ${web.xmpp.bosh.upstream.disable}     # For Virtual Hosting
    ${web.xmpp.bosh.upstream.disable}     set $virtual_host $http_host;
    ${web.xmpp.bosh.upstream.disable}     if ($virtual_host = '') {
    ${web.xmpp.bosh.upstream.disable}         set $virtual_host $server_addr:$server_port;
    ${web.xmpp.bosh.upstream.disable}     }
    ${web.xmpp.bosh.upstream.disable}     proxy_set_header Host            $virtual_host;
    ${web.xmpp.bosh.upstream.disable} }

    ${web.ews.upstream.disable} location ~* ^/ews/Exchange.asmx
    ${web.ews.upstream.disable} {
    ${web.ews.upstream.disable}     # Proxy to Zimbra Upstream
    ${web.ews.upstream.disable}     proxy_pass          ${web.upstream.ews.target};
    ${web.ews.upstream.disable}     proxy_read_timeout  ${web.upstream.polling.timeout};
    ${web.ews.upstream.disable}     proxy_buffering     off;
    ${web.ews.upstream.disable}
    ${web.ews.upstream.disable}     # For audit
    ${web.ews.upstream.disable}     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    ${web.ews.upstream.disable}
    ${web.ews.upstream.disable}     # For Virtual Hosting
    ${web.ews.upstream.disable}     set $virtual_host $http_host;
    ${web.ews.upstream.disable}     if ($virtual_host = '') {
    ${web.ews.upstream.disable}        set $virtual_host $server_name:$server_port;
    ${web.ews.upstream.disable}     }
    ${web.ews.upstream.disable}     proxy_set_header Host            $virtual_host;
    ${web.ews.upstream.disable}
    ${web.ews.upstream.disable}     # Location header fudging
    ${web.ews.upstream.disable}     # Because NGINX SSL speaks plain HTTP to upstream, therefore any
    ${web.ews.upstream.disable}     # redirects to http:// coming from the upstream need to be fudged
    ${web.ews.upstream.disable}     # to https://
    ${web.ews.upstream.disable}     #
    ${web.ews.upstream.disable}     proxy_redirect http://$http_host/ https://$http_host/;
    ${web.ews.upstream.disable}
    ${web.ews.upstream.disable}     # Fudge inter-mailbox redirects (kludge)
    ${web.ews.upstream.disable}     proxy_redirect http://$relhost/ https://$http_host/;
    ${web.ews.upstream.disable} }

    location ~* /(service|principals|dav|\.well-known|home|octopus|shf|user|certauth|spnegoauth|(zimbra/home)|(zimbra/user))/
    {
        # Begin stray redirect hack
        #
        # In some cases, we may get a stray redirect out of the mailhost,
        # which attempts to send us to $host:$mailhostport, where:
        #
        # $host is the host portion (excluding port) of the proxy URL
        # $mailhostport is the zimbraMailPort as applies to the mailhost
        #   server being redirected to
        #
        # This is the case when one mailhost in the upstream cluster is
        # trying to redirect to another mailhost in the same cluster
        # In this case, we need to trap and fudge this location header
        #
        # NOTE that this will only work in the cases where each mailhost
        # within the cluster has the same mailhostport (Limitation)
        #

        set $mailhostport ${web.http.uport};   # replace this with *the* mailhost port
        set $relhost $host;

        if ($mailhostport != 80) {   # standard HTTP port, do not replace
            set $relhost $host:$mailhostport;
        }

        # End stray redirect hack

        # Proxy to Zimbra Mailbox Upstream
        proxy_pass       ${web.upstream.target};

        # For audit
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # For Virtual Hosting
        set $virtual_host $http_host;
        if ($virtual_host = '') {
            set $virtual_host $server_name:$server_port;
        }
        proxy_set_header Host            $virtual_host;

        # Location header fudging
        # Because NGINX SSL speaks plain HTTP to upstream, therefore any
        # redirects to http:// coming from the upstream need to be fudged
        # to https://
        #
        proxy_redirect http://$http_host/ https://$http_host/;

        # Fudge inter-mailbox redirects (kludge)
        proxy_redirect http://$relhost/ https://$http_host/;
    }

    location ~* ^/zmerror_.*\.html$ {
        # for custom error pages, internal use only
        internal;
    }

    include                 ${core.includes}/${core.cprefix}.docs.common;
}

