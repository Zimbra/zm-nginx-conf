http
{
    # disable nginx version on error pages
    server_tokens off;

    ${upstream.fair.shm.size}

    root /opt/zimbra/data/nginx/html;

    # You need to customize these two values by setting local config
    # proxy_server_names_hash_max_size and proxy_names_hash_bucket_size
    # when too many virtual host names are added
    server_names_hash_max_size ${web.server_names.max_size};
    server_names_hash_bucket_size ${web.server_names.bucket_size};

    # Define whether nginx will match exact server version against the
    # version received in the client request. Defaults to 'on'
    # Setting this to off will make nginx compare only the major and minor
    # server versions (eg. all 8.5.x will be treated same by nginx)
    exact_version_check ${web.upstream.exactversioncheck};

    # Define the collection of upstream HTTP webclient servers to which we will proxy
    # Define each server:port against a server directive
    #
    upstream ${web.upstream.webclient.name}
    {
        ${web.upstream.webclient.:servers}
        zmauth;
    }

    #  Define the collection of upstream HTTP servers to which we will proxy
    #  Define each server:port against a server directive
    #
    upstream ${web.upstream.name}
    {
        ${web.upstream.:servers}
        zmauth;
    }

    #  Define the collection of upstream HTTPS webclient servers to which we will proxy
    #  Define each server:port against a server directive
    #
    upstream ${web.ssl.upstream.webclient.name}
    {
        ${web.ssl.upstream.webclient.:servers}
        zmauth;
    }

    #  Define the collection of upstream HTTPS servers to which we will proxy
    #  Define each server:port against a server directive
    upstream ${web.ssl.upstream.name}
    {
        ${web.ssl.upstream.:servers}
        zmauth;
    }

     #  Define the collection of upstream admin client servers to which we will
    #  proxy. Define each server:port against a server directive
    #
    upstream ${web.admin.upstream.adminclient.name}
    {
        ${web.admin.upstream.adminclient.:servers}
        zmauth_admin;
    }

    #  Define the collection of upstream admin console servers to which we will
    #  proxy. Define each server:port against a server directive
    #
    upstream ${web.admin.upstream.name}
    {
        ${web.admin.upstream.:servers}
        zmauth_admin;
    }

    include                 ${core.includes}/${core.cprefix}.docs.upstream;

    #  Define the collection of upstream HTTP EWS servers to which we will
    #  proxy EWS request. Define each server:port against a server directive
    #
    ${web.ews.upstream.disable} upstream ${web.ews.upstream.name}
    ${web.ews.upstream.disable} {
    ${web.ews.upstream.disable}    ${web.upstream.ewsserver.:servers}
    ${web.ews.upstream.disable}    zmauth;
    ${web.ews.upstream.disable} }

    #  Define the collection of upstream HTTPS EWS servers to which we will
    #  proxy EWS request. Define each server:port against a server directive
    #
    ${web.ews.upstream.disable} upstream ${web.ssl.ews.upstream.name}
    ${web.ews.upstream.disable} {
    ${web.ews.upstream.disable}    ${web.ssl.upstream.ewsserver.:servers}
    ${web.ews.upstream.disable}    zmauth;
    ${web.ews.upstream.disable} }

    #  Define the collection of upstream HTTP Login servers to which we will
    #  proxy login request. Define each server:port against a server directive
    #
    ${web.login.upstream.disable} upstream ${web.login.upstream.name}
    ${web.login.upstream.disable} {
    ${web.login.upstream.disable}    ${web.upstream.loginserver.:servers}
    ${web.login.upstream.disable}    zmauth;
    ${web.login.upstream.disable} }

    #  Define the collection of upstream HTTPS Login servers to which we will
    #  proxy login request. Define each server:port against a server directive
    #
    ${web.login.upstream.disable} upstream ${web.ssl.login.upstream.name}
    ${web.login.upstream.disable} {
    ${web.login.upstream.disable}    ${web.ssl.upstream.loginserver.:servers}
    ${web.login.upstream.disable}    zmauth;
    ${web.login.upstream.disable} }

    # Enable Access logs for web traffic
    log_format upstream '$remote_addr:$remote_port - $remote_user [$time_local]  '
      '"$request_method $scheme://$host$request_uri $server_protocol" $status $bytes_sent '
      '"$http_referer" "$http_user_agent" "$upstream_addr" "$server_addr:$server_port"';
    access_log ${web.logfile} upstream;

    # Set proxy timeout
    proxy_connect_timeout ${web.upstream.connect.timeout};
    proxy_read_timeout ${web.upstream.read.timeout};
    proxy_send_timeout ${web.upstream.send.timeout};

    # Custom error pages for upstream connection errors
    ${web.:error_pages}

    ${ssl.clientcertca.enabled}ssl_client_certificate  ${ssl.clientcertca.default};

    # turn on tcp keepalive
    tcp_keepalive on;

    ${web.http.enabled}include ${core.includes}/${core.cprefix}.web.http;
    ${web.http.enabled}include ${core.includes}/${core.cprefix}.web.http.default;
    ${web.https.enabled}include ${core.includes}/${core.cprefix}.web.https;
    ${web.https.enabled}include ${core.includes}/${core.cprefix}.web.https.default;
    ${web.sso.default.enabled}include ${core.includes}/${core.cprefix}.web.sso;
    ${web.sso.default.enabled}include ${core.includes}/${core.cprefix}.web.sso.default;
    ${web.admin.default.enabled}include ${core.includes}/${core.cprefix}.web.admin;
    ${web.admin.default.enabled}include ${core.includes}/${core.cprefix}.web.admin.default;
}
